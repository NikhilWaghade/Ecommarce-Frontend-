import React, { useEffect, useState, useRef, useLayoutEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
import { useAdminAuth } from '../context/AdminAuthContext';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { Plus, List, LayoutDashboard, LogOut, Menu } from 'lucide-react';

const AdminPanel = () => {
 const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({
    name: '',
    description: '',
    price: '',
    category: '',
    stock: '',
    brand: '',
    discountPercent: '',
    originalPrice: '',
  });
  const [imageFile, setImageFile] = useState(null);
  const [additionalImages, setAdditionalImages] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [editProductId, setEditProductId] = useState(null);
  const [activeSection, setActiveSection] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const { admin, logout } = useAdminAuth();
  const navigate = useNavigate();

  // Ref to right container to match sidebar height
  const rightContainerRef = useRef(null);
  const [sidebarHeight, setSidebarHeight] = useState('auto');

  useLayoutEffect(() => {
    function updateHeight() {
      if (rightContainerRef.current) {
        setSidebarHeight(rightContainerRef.current.clientHeight + 'px');
      }
    }
    updateHeight();
    window.addEventListener('resize', updateHeight);
    return () => window.removeEventListener('resize', updateHeight);
  }, [activeSection, products]);

  useEffect(() => {
    if (!admin) {
      navigate('/admin/admin-login');
    } else {
      fetchProducts();
    }
  }, [admin, navigate]);

  const fetchProducts = () => {
    axios
      .get('http://localhost:5000/api/products')
      .then((res) => setProducts(res.data))
      .catch(() => toast.error('Failed to load products', { autoClose: 1500 }));
  };

  const deleteProduct = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/api/products/${id}`);
      toast.success('Product deleted', { autoClose: 1500 });
      fetchProducts();
    } catch {
      toast.error('Error deleting product', { autoClose: 1500 });
    }
  };

  const handleInputChange = (e) => {
    setNewProduct({ ...newProduct, [e.target.name]: e.target.value });
  };

  const handleImageChange = (e) => {
    setImageFile(e.target.files[0]);
  };

  const handleAdditionalImagesChange = (e) => {
    setAdditionalImages(Array.from(e.target.files));
  };

  const handleAddProduct = async (e) => {
    e.preventDefault();
    const { name, description, price, category, stock, brand, discountPercent, originalPrice } = newProduct;

    if (!name || !description || !price || !category || !stock) {
      return toast.error('All fields are required', { autoClose: 1500 });
    }

    const formData = new FormData();
    formData.append('name', name);
    formData.append('description', description);
    formData.append('price', price);
    formData.append('category', category);
    formData.append('stock', stock);
    formData.append('brand', brand);
    formData.append('discountPercent', discountPercent);
    formData.append('originalPrice', originalPrice);
    if (imageFile) formData.append('image', imageFile);
    additionalImages.forEach((file) => formData.append('images', file));

    try {
      if (isEditing) {
        await axios.put(`http://localhost:5000/api/products/${editProductId}`, formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
        toast.success('Product updated', { autoClose: 1500 });
        setIsEditing(false);
        setEditProductId(null);
      } else {
        await axios.post('http://localhost:5000/api/products', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
        toast.success('Product added', { autoClose: 1500 });
      }
      setNewProduct({
        name: '',
        description: '',
        price: '',
        category: '',
        stock: '',
        brand: '',
        discountPercent: '',
        originalPrice: '',
      });
      setImageFile(null);
      setAdditionalImages([]);
      fetchProducts();
    } catch {
      toast.error('Error saving product', { autoClose: 1500 });
    }
  };

  const handleEdit = (product) => {
    setIsEditing(true);
    setEditProductId(product._id);
    setNewProduct({
      name: product.name,
      description: product.description,
      price: product.price,
      category: product.category,
      stock: product.stock,
      brand: product.brand,
      discountPercent: product.discountPercent,
      originalPrice: product.originalPrice,
    });
    setImageFile(null);
    setAdditionalImages([]);
    setActiveSection('addProduct');
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleLogout = () => {
    logout();
    navigate('/', { replace: true });
  };

  const chartData = [
    { month: 'Jan', users: 100, sales: 240 },
    { month: 'Feb', users: 150, sales: 300 },
    { month: 'Mar', users: 200, sales: 400 },
    { month: 'Apr', users: 250, sales: 380 },
    { month: 'May', users: 300, sales: 500 },
  ];


  return (
    <div className="flex min-h-screen">

      {/* Mobile/Tablet top navbar */}
      <div className="md:hidden flex justify-between items-center bg-gray-500 text-white p-4">
        <h2 className="text-xl font-bold">Admin Panel</h2>
        <button
          aria-label="Toggle Menu"
          onClick={() => setSidebarOpen((open) => !open)}
          className="focus:outline-none"
        >
          <Menu size={24} />
        </button>
      </div>

      {/* Sidebar */}
      <nav
        className={`fixed top-0 left-0 z-20 w-64 bg-gray-500 text-white p-4 h-full md:h-auto md:relative md:flex-shrink-0
          transform md:translate-x-0 transition-transform duration-300 ease-in-out
          ${
            sidebarOpen
              ? 'translate-x-0'
              : '-translate-x-full md:translate-x-0'
          } md:block
        `}
        style={{ height: sidebarHeight }}
      >
        <h2 className="text-2xl font-bold mb-6 hidden md:block">Admin Panel</h2>
        <nav className="space-y-4">
          <button
            onClick={() => {
              setActiveSection('dashboard');
              setSidebarOpen(false);
            }}
            className={`flex items-center gap-2 w-full p-2 rounded ${
              activeSection === 'dashboard'
                ? 'bg-gray-700 text-blue-400'
                : ''
            }`}
          >
            <LayoutDashboard size={18} /> Dashboard
          </button>
          <button
            onClick={() => {
              setActiveSection('addProduct');
              setSidebarOpen(false);
            }}
            className={`flex items-center gap-2 w-full p-2 rounded ${
              activeSection === 'addProduct'
                ? 'bg-gray-700 text-blue-400'
                : ''
            }`}
          >
            <Plus size={18} /> Add Product
          </button>
          <button
            onClick={() => {
              setActiveSection('productList');
              setSidebarOpen(false);
            }}
            className={`flex items-center gap-2 w-full p-2 rounded ${
              activeSection === 'productList'
                ? 'bg-gray-700 text-blue-400'
                : ''
            }`}
          >
            <List size={18} /> Product List
          </button>
          <button
            onClick={() => {
              handleLogout();
              setSidebarOpen(false);
            }}
            className="flex items-center gap-2 w-full p-2 bg-red-600 hover:bg-red-700 text-white rounded mt-8"
          >
            <LogOut size={18} /> Logout
          </button>
        </nav>
      </nav>

      {/* Main Content */}
      <div className="ml- flex-1 p-6 bg-gradient-to-br from-blue-50 to-green-50">
        {/* Dashboard Graphs */}
        {activeSection === 'dashboard' && (
          <div className="space-y-10">
            <h2 className="text-3xl font-bold mb-6">Dashboard Overview</h2>
            <div className="grid md:grid-cols-2 gap-8">
              {/* User Growth Line Chart */}
              <div className="bg-white rounded shadow p-4">
                <h3 className="text-xl font-semibold mb-4">User Growth</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={chartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="users" stroke="#4A90E2" />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* Product Sales Bar Chart */}
              <div className="bg-white rounded shadow p-4">
                <h3 className="text-xl font-semibold mb-4">Product Sales</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={chartData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="sales" fill="#34D399" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        )}

        {/* Add Product Form */}
        {activeSection === 'addProduct' && (
          <form onSubmit={handleAddProduct} className="space-y-4 mt-4" encType="multipart/form-data">
            <h2 className="text-2xl font-semibold">Add / Edit Product</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input type="text" name="name" placeholder="Product name" value={newProduct.name} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="number" name="price" placeholder="Price" value={newProduct.price} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="text" name="category" placeholder="Category" value={newProduct.category} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="number" name="stock" placeholder="Stock" value={newProduct.stock} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="text" name="brand" placeholder="Brand" value={newProduct.brand} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="number" name="discountPercent" placeholder="Discount Percent" value={newProduct.discountPercent} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="number" name="originalPrice" placeholder="Original Price" value={newProduct.originalPrice} onChange={handleInputChange} className="p-2 border rounded" />
              <input type="file" name="image" accept="image/*" onChange={handleImageChange} className="p-2 border rounded" />
              <input type="file" name="images" accept="image/*" multiple onChange={handleAdditionalImagesChange} className="p-2 border rounded" />
              <textarea name="description" placeholder="Description" value={newProduct.description} onChange={handleInputChange} className="p-2 border rounded col-span-full" />
            </div>
            <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
              {isEditing ? "Update Product" : "Add Product"}
            </button>
          </form>
        )}

        {/* Product List Table */}
        {activeSection === 'productList' && (
          <div className="mt-4">
            <h2 className="text-2xl font-semibold mb-4">Product List</h2>
            <table className="w-full table-auto border">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border px-2 py-1">Name</th>
                  <th className="border px-2 py-1">Price</th>
                  <th className="border px-2 py-1">Stock</th>
                  <th className="border px-2 py-1">Category</th>
                  <th className="border px-2 py-1">Image</th>
                  <th className="border px-2 py-1">Actions</th>
                </tr>
              </thead>
              <tbody>
                {products.map((p) => (
                  <tr key={p._id}>
                    <td className="border px-2 py-1">{p.name}</td>
                    <td className="border px-2 py-1">₹{p.price}</td>
                    <td className="border px-2 py-1">{p.stock}</td>
                    <td className="border px-2 py-1">{p.category}</td>
                    <td className="border px-2 py-1">
                      <img src={`http://localhost:5000/${p.image}`} alt={p.name} className="w-12 h-12 object-cover rounded" />
                    </td>
                    <td className="border px-2 py-1">
                      <button className="text-blue-600 mr-2" onClick={() => handleEdit(p)}>Edit</button>
                      <button className="text-red-600" onClick={() => deleteProduct(p._id)}>Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPanel;
